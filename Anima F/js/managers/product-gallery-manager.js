const ProductGalleryManager = {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
    setupProductGallery: function(elementDiv, elementIndex) {
        const gallery = elementDiv.querySelector('.product-gallery');
        const addBtn = elementDiv.querySelector('.add-product-btn');
        const fileInput = elementDiv.querySelector('.gallery-upload-input');
        const prevBtn = elementDiv.querySelector('.gallery-prev');
        const nextBtn = elementDiv.querySelector('.gallery-next');
        const container = elementDiv.querySelector('.gallery-container');
        const indicator = elementDiv.querySelector('.gallery-indicator');
        
        let currentSlide = 0;
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        const currentScreen = ScreensManager.getCurrentScreen();
        const element = currentScreen.elements[elementIndex];
        
        if (element.products && element.products.length > 0) {
            this.renderGalleryProducts(container, indicator, element.products, elementIndex);
            this.updateGalleryControls(gallery, element.products.length);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        addBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            fileInput?.click();
        });
        
        fileInput?.addEventListener('change', (e) => {
            this.handleGalleryUpload(e.target.files, container, indicator, elementIndex, gallery);
        });
        
        prevBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            if (element.products && element.products.length > 0) {
                currentSlide = (currentSlide - 1 + element.products.length) % element.products.length;
                this.updateGalleryPosition(container, currentSlide);
                this.updateGalleryIndicator(indicator, currentSlide, element.products.length);
            }
        });
        
        nextBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            if (element.products && element.products.length > 0) {
                currentSlide = (currentSlide + 1) % element.products.length;
                this.updateGalleryPosition(container, currentSlide);
                this.updateGalleryIndicator(indicator, currentSlide, element.products.length);
            }
        });
        
        // –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        gallery?.addEventListener('mouseenter', () => {
            const controls = gallery.querySelector('.gallery-controls');
            const indicator = gallery.querySelector('.gallery-indicator');
            if (controls && element.products && element.products.length > 1) {
                controls.style.opacity = '1';
            }
            if (indicator && element.products && element.products.length > 1) {
                indicator.style.opacity = '1';
            }
        });
        
        gallery?.addEventListener('mouseleave', () => {
            const controls = gallery.querySelector('.gallery-controls');
            const indicator = gallery.querySelector('.gallery-indicator');
            if (controls) controls.style.opacity = '0';
            if (indicator) indicator.style.opacity = '0';
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        elementDiv._galleryData = {
            currentSlide,
            container,
            indicator,
            gallery
        };
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    handleGalleryUpload: function(files, container, indicator, elementIndex, gallery) {
        const currentScreen = ScreensManager.getCurrentScreen();
        const element = currentScreen.elements[elementIndex];
        
        if (!element.products) {
            element.products = [];
        }
        
        const products = element.products;
        let loadedCount = 0;
        const totalFiles = Array.from(files).filter(file => file.type.match('image.*')).length;
        
        if (totalFiles === 0) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            return;
        }
        
        Array.from(files).forEach(file => {
            if (file.type.match('image.*')) {
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    products.push({
                        image: e.target.result,
                        title: `–¢–æ–≤–∞—Ä ${products.length + 1}`,
                        price: '999 ‚ÇΩ',
                        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
                    });
                    
                    loadedCount++;
                    
                    // –ö–æ–≥–¥–∞ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
                    if (loadedCount === totalFiles) {
                        this.renderGalleryProducts(container, indicator, products, elementIndex);
                        this.updateGalleryControls(gallery, products.length);
                    }
                };
                
                reader.readAsDataURL(file);
            }
        });
    },

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥–∞–ª–µ—Ä–µ–µ
    renderGalleryProducts: function(container, indicator, products, elementIndex) {
        if (products.length === 0) {
            container.innerHTML = `
                <div class="gallery-item empty" style="min-width:100%;height:100%;display:flex;align-items:center;justify-content:center;color:#666;flex-direction:column;gap:8px;">
                    <div style="font-size:24px">üõçÔ∏è</div>
                    <div>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã</div>
                    <button class="add-product-btn" style="background:#6a11cb;color:white;border:none;padding:6px 12px;border-radius:4px;font-size:12px;cursor:pointer;">–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</button>
                </div>
            `;
            return;
        }
        
        container.innerHTML = products.map((product, index) => `
            <div class="gallery-item" style="min-width:100%;height:100%;display:flex;align-items:center;padding:12px;gap:12px;background:white;">
                <div style="width:80px;height:80px;border-radius:6px;overflow:hidden;flex-shrink:0;">
                    <img src="${product.image}" style="width:100%;height:100%;object-fit:cover;">
                </div>
                <div style="flex:1;">
                    <div style="font-weight:600;font-size:14px;margin-bottom:4px;">${product.title}</div>
                    <div style="color:#6a11cb;font-weight:700;font-size:16px;">${product.price}</div>
                    <div style="color:#666;font-size:12px;margin-bottom:8px;">${product.description}</div>
                    <div style="display:flex;gap:8px;margin-top:8px;">
                        <button class="product-edit" data-index="${index}" style="background:#f8f9fa;border:1px solid #ddd;padding:4px 8px;border-radius:3px;font-size:10px;cursor:pointer;">‚úèÔ∏è</button>
                        <button class="product-delete" data-index="${index}" style="background:#ff6b6b;color:white;border:none;padding:4px 8px;border-radius:3px;font-size:10px;cursor:pointer;">üóëÔ∏è</button>
                    </div>
                </div>
            </div>
        `).join('');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        this.updateGalleryIndicator(indicator, 0, products.length);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
        this.setupProductItemHandlers(container, elementIndex);
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    setupProductItemHandlers: function(container, elementIndex) {
        container.querySelectorAll('.product-edit').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const productIndex = parseInt(e.target.dataset.index);
                this.editProduct(elementIndex, productIndex);
            });
        });
        
        container.querySelectorAll('.product-delete').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const productIndex = parseInt(e.target.dataset.index);
                this.deleteProduct(elementIndex, productIndex);
            });
        });
    },

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    editProduct: function(elementIndex, productIndex) {
        const currentScreen = ScreensManager.getCurrentScreen();
        const product = currentScreen.elements[elementIndex].products[productIndex];
        
        const newTitle = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', product.title);
        const newPrice = prompt('–¶–µ–Ω–∞:', product.price);
        const newDescription = prompt('–û–ø–∏—Å–∞–Ω–∏–µ:', product.description);
        
        if (newTitle !== null) product.title = newTitle;
        if (newPrice !== null) product.price = newPrice;
        if (newDescription !== null) product.description = newDescription;
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
        this.refreshGallery(elementIndex);
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    deleteProduct: function(elementIndex, productIndex) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) return;
        
        const currentScreen = ScreensManager.getCurrentScreen();
        currentScreen.elements[elementIndex].products.splice(productIndex, 1);
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
        this.refreshGallery(elementIndex);
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≥–∞–ª–µ—Ä–µ–∏
    updateGalleryPosition: function(container, currentSlide) {
        container.style.transform = `translateX(-${currentSlide * 100}%)`;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–ª–∞–π–¥–æ–≤
    updateGalleryIndicator: function(indicator, currentSlide, totalSlides) {
        if (totalSlides <= 1) {
            indicator.innerHTML = '';
            return;
        }
        
        indicator.innerHTML = Array.from({length: totalSlides}, (_, i) => 
            `<div style="width:6px;height:6px;border-radius:50%;background:${i === currentSlide ? '#6a11cb' : 'rgba(255,255,255,0.5)'};"></div>`
        ).join('');
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    updateGalleryControls: function(gallery, productCount) {
        const controls = gallery?.querySelector('.gallery-controls');
        const indicator = gallery?.querySelector('.gallery-indicator');
        
        if (productCount > 1) {
            controls?.style.setProperty('opacity', '0', 'important');
            indicator?.style.setProperty('opacity', '0', 'important');
        } else {
            controls?.style.setProperty('opacity', '0', 'important');
            indicator?.style.setProperty('opacity', '0', 'important');
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏
    refreshGallery: function(elementIndex) {
        const elementDiv = document.querySelector(`[data-index="${elementIndex}"]`);
        if (!elementDiv) return;
        
        const container = elementDiv.querySelector('.gallery-container');
        const indicator = elementDiv.querySelector('.gallery-indicator');
        const gallery = elementDiv.querySelector('.product-gallery');
        
        const currentScreen = ScreensManager.getCurrentScreen();
        const products = currentScreen.elements[elementIndex].products || [];
        
        this.renderGalleryProducts(container, indicator, products, elementIndex);
        this.updateGalleryControls(gallery, products.length);
    },

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    restoreGallery: function(elementDiv, element, index) {
        if (element.products && element.products.length > 0) {
            const container = elementDiv.querySelector('.gallery-container');
            const indicator = elementDiv.querySelector('.gallery-indicator');
            const gallery = elementDiv.querySelector('.product-gallery');
            
            this.renderGalleryProducts(container, indicator, element.products, index);
            this.updateGalleryControls(gallery, element.products.length);
        }
    }
};