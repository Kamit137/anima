const ImageManager = {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
    setupImageUpload: function(elementDiv, index) {
        const uploadBtn = elementDiv.querySelector('.image-upload-btn');
        const fileInput = elementDiv.querySelector('.image-upload-input');
        const placeholder = elementDiv.querySelector('.image-placeholder');
        const container = elementDiv.querySelector('.image-container');
        
        if (uploadBtn && fileInput) {
            uploadBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                fileInput.click();
            });
            
            fileInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    this.handleImageUpload(file, container, placeholder, index);
                }
            });
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    handleImageUpload: function(file, container, placeholder, elementIndex) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if (!file.type.match('image.*')) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
        if (file.size > 5 * 1024 * 1024) {
            alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        placeholder.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        placeholder.classList.add('image-loading');
        
        const reader = new FileReader();
        
        reader.onload = (e) => {
            placeholder.classList.remove('image-loading');
            
            const img = new Image();
            img.onload = () => {
                this.createImageElement(container, placeholder, e.target.result, elementIndex);
            };
            
            img.src = e.target.result;
        };
        
        reader.onerror = () => {
            placeholder.classList.remove('image-loading');
            placeholder.innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            setTimeout(() => {
                placeholder.innerHTML = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
            }, 2000);
        };
        
        reader.readAsDataURL(file);
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    createImageElement: function(container, placeholder, imageData, elementIndex) {
        const img = document.createElement('img');
        img.src = imageData;
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.borderRadius = '5px';
        
        placeholder.style.display = 'none';
        container.style.background = 'none';
        container.innerHTML = '';
        container.appendChild(img);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        this.addRemoveButton(container, placeholder, elementIndex);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
        this.saveImageToElement(elementIndex, imageData);
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    addRemoveButton: function(container, placeholder, elementIndex) {
        const removeBtn = document.createElement('button');
        removeBtn.className = 'image-remove-btn';
        removeBtn.innerHTML = '‚ùå';
        removeBtn.title = '–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
        removeBtn.style.cssText = `
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0,0,0,0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            z-index: 10;
        `;
        
        removeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.resetImage(container, placeholder, elementIndex);
        });
        
        container.appendChild(removeBtn);
    },

    // –°–±—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—É
    resetImage: function(container, placeholder, elementIndex) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const elementDiv = container.parentElement;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML
        container.innerHTML = `
            <div class="image-placeholder" style="color:white;z-index:1;">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div>
            <input type="file" accept="image/*" class="image-upload-input" style="display:none;">
            <button class="image-upload-btn" style="position:absolute;bottom:5px;right:5px;background:rgba(0,0,0,0.7);color:white;border:none;border-radius:3px;padding:2px 6px;font-size:10px;cursor:pointer;z-index:2;">üìÅ</button>
        `;
        container.style.background = 'linear-gradient(135deg, #6a11cb 0%, #2575fc 100%)';
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        this.setupImageUpload(elementDiv, elementIndex);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        this.removeImageFromElement(elementIndex);
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç
    saveImageToElement: function(elementIndex, imageData) {
        const currentScreen = ScreensManager.getCurrentScreen();
        if (currentScreen.elements[elementIndex]) {
            currentScreen.elements[elementIndex].imageData = imageData;
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
    removeImageFromElement: function(elementIndex) {
        const currentScreen = ScreensManager.getCurrentScreen();
        if (currentScreen.elements[elementIndex]) {
            delete currentScreen.elements[elementIndex].imageData;
        }
    },

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    restoreImage: function(elementDiv, element, index) {
        const container = elementDiv.querySelector('.image-container');
        const placeholder = elementDiv.querySelector('.image-placeholder');
        
        if (container && placeholder && element.imageData) {
            this.createImageElement(container, placeholder, element.imageData, index);
        }
    }
};